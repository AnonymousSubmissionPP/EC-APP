free AliceIssuer:channel.
free AlicePSM:channel.
free AlicePSS:channel.
free IssuerPSM:channel[private].
free IssuerPSS:channel[private].
free IssuerShop:channel[private].
free AliceShop:channel[private].
free internet:channel.
    
type host.
type coins.
type key.
type pkey.
type skey.
type sskey.
type spkey.

const Discount:bitstring.
const atMall:bitstring.
const atShop:bitstring.

(*Hash*)
fun hash(bitstring,bitstring):bitstring. (*compute ecoupon*)
fun Hash(bitstring):bitstring. (*compute ecoupons for Shop storage*)

(*certification*)
fun spk(sskey):spkey. (*public key derivation for the secret key*)
fun makecert(host,pkey,sskey):bitstring.
reduc forall x:host, y:pkey, z:sskey; checkCert(makecert(x,y,z),spk(z))=(x,y).

(*public key encryption*)
fun pk(skey):pkey. (*public key derivation for the secret key*)
fun aenc(bitstring,pkey):bitstring. (*asymmetric encryption with inputs plaintext and key and outputs ciphertext*)
reduc forall m:bitstring,k:skey; adec(aenc(m,pk(k)),k)=m. (*asymmetric decryption with inputs ciphertext and secret key and outputs plaintext*)

(*AEAD*) (*Encrypt-then-mac*)
fun internal_senc(bitstring,key,coins):bitstring.
reduc forall m:bitstring,k:key,r:coins; sdec(internal_senc(m,k,r),k)=m.
letfun senc(m:bitstring,k:key)=new r:coins; internal_senc(m,k,r).

(*symmetric encryption*)
fun symenc(bitstring,bitstring):bitstring.
reduc forall m:bitstring,n:bitstring; symdec(symenc(m,n),n)=m.


free nonce_first:bitstring[private].
free nonce_second:bitstring[private].
free nonce_ecoupon:bitstring[private].


(*Events*)
event IssuerBegin(host,bitstring).

event PSMbegin(host,bitstring).
event PSMfinish(host,bitstring).

event AliceBegin(host,bitstring).
event AliceReceiveFH(host,bitstring).

event PSSbegin(host,bitstring).
event PSSM1(host,bitstring).

event AliceReceiveCert(host,bitstring).
event AliceSendEFH(host,bitstring).

event IssuerReceiveFH(host,bitstring).
event IssuerSendSH(host,bitstring).
event IssuerFinish(host,bitstring).

event PSSfinish(host,bitstring).

event AliceReceiveM2(host,bitstring).
event AliceReceiveSH(host,bitstring).
event AliceGotCoupon(host,bitstring).

event ShopReceiveEcoupon(host,bitstring).
event ShopSuccess(host,bitstring).
event ShopFinish(host,bitstring).

event AliceFinish(host,bitstring).

let processAlice(Alice:host,pkCA:spkey)=

(*Alice near Mall*)
    out(AlicePSM,atMall);
(*Step 3*)
    in(AlicePSM,firsthalf:bitstring);
    event AliceBegin(Alice,firsthalf);
    event AliceReceiveFH(Alice,firsthalf);

(*Alice near Shop*)
    out(AlicePSS,atShop);

(*Step 4*)
    in(AlicePSS,certIssuer:bitstring);
    event AliceReceiveCert(Alice,certIssuer);

    let (Issuer:host,pkI:pkey)=checkCert(certIssuer,pkCA) in

(*Step 5*)
    new K:key;
    let M1=aenc((firsthalf,K),pkI) in

(*Step 6*)
    event AliceSendEFH(Alice,M1);
    out(AlicePSS,M1);

(*Step 10*)
    in(AlicePSS, M2:bitstring);
    event AliceReceiveM2(Alice,M2);

(*Step 11*)
    let (=firsthalf,secondhalf:bitstring)=sdec(M2,K) in
    event AliceReceiveSH(Alice,secondhalf);

    let Ecoupon=hash(firsthalf,secondhalf) in
    event AliceGotCoupon(Alice,Ecoupon);

(*Step 12*)
    out(AliceShop,Ecoupon);

(*Step 14*)
    in(AliceShop,=Discount);
    event AliceFinish(Alice,Ecoupon);
    out(internet,symenc(nonce_first,firsthalf));
    out(internet,symenc(nonce_second,secondhalf));
    out(internet,symenc(nonce_ecoupon,Ecoupon)).


let processIssuer(Issuer:host,skI:skey,certIssuer:bitstring,firsthalf:bitstring,secondhalf:bitstring)=

    out(IssuerShop,Hash(hash(firsthalf,secondhalf)));

(*Step 7*)
    in(IssuerPSS,M1:bitstring);
    event IssuerBegin(Issuer,M1);
    let (firsthalf_rec:bitstring,K:key)=adec(M1,skI) in
    if firsthalf_rec=firsthalf then
    event IssuerReceiveFH(Issuer,M1);

(*Step 8*)   
    let M2=senc((firsthalf,secondhalf),K) in

(*Step 9*)
    event IssuerSendSH(Issuer,M2);
    event IssuerFinish(Issuer,M2);
    out(IssuerPSS,M2).


let processPSM(PSM:host,firsthalf:bitstring)=

    in(AlicePSM,=atMall);
(*Step 1-3*)    
(*Assumption: Alice accepts the notification*)
    event PSMbegin(PSM,firsthalf); 
    event PSMfinish(PSM,firsthalf);
    out(AlicePSM,firsthalf).
 
let processPSS(PSS:host,certIssuer:bitstring)=

    (* in(AlicePSS,=atShop); *)
(*Step 4*)
    event PSSbegin(PSS,certIssuer); 
    out(AlicePSS,certIssuer);

(*Step 6-7*)
    in (AlicePSS,M1:bitstring);
    event PSSM1(PSS,M1);
    out(IssuerPSS,M1);
(*Step 9-10*)
    in (IssuerPSS,M2:bitstring);
    event PSSfinish(PSS,M2);
    out(AlicePSS,M2).
 

 let processShop(Shop:host)=
    in(IssuerShop,H_Ecoupon:bitstring);
(*Step 12*)
    in(AliceShop,Ecoupon_rec:bitstring);
    event ShopReceiveEcoupon(Shop,Ecoupon_rec);

(*Step 13*)
    if H_Ecoupon=Hash(Ecoupon_rec) then
    event ShopSuccess(Shop,Discount);

    event ShopFinish(Shop,Discount);
    out(AliceShop,Discount).
     
process
    new skCA:sskey; let pkCA=spk(skCA) in
!(
    new Issuer:host; new Alice:host; new PSM:host; new PSS:host; new Shop:host;
    new skI:skey; let pkI=pk(skI) in
  
    let certIssuer=makecert(Issuer,pkI,skCA) in

    new firsthalf1:bitstring; 
    new secondhalf1:bitstring; 
    new firsthalf2:bitstring; 
    new secondhalf2:bitstring; 
    let ecoupon1=hash(firsthalf1,secondhalf1) in
    let H_Ecoupon1=Hash(ecoupon1) in
    let ecoupon2=hash(firsthalf2,secondhalf2) in
    let H_Ecoupon2=Hash(ecoupon2) in
    
    !processIssuer(Issuer,skI,certIssuer,firsthalf1,choice[secondhalf1,secondhalf2])| 
    !processIssuer(Issuer,skI,certIssuer,firsthalf2,choice[secondhalf1,secondhalf2])|  
    !processPSM(PSM,firsthalf1)|  !processPSM(PSM,firsthalf2)  |
    !processPSS(PSS,certIssuer) | !processShop(Shop) | !processAlice(Alice,pkCA)
)
        
  
   